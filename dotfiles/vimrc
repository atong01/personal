

" Vim-plug initialization

command! Reloadplug :!rm ~/.vim/autoload/plug.vim
let vim_plug_just_installed = 0
let vim_plug_path = expand('~/.vim/autoload/plug.vim')
if !filereadable(vim_plug_path)
    echo "Installing Vim-plug..."
    echo ""
    silent !mkdir -p ~/.vim/autoload
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    let vim_plug_just_installed = 1
endif

" manually load vim-plug the first time
if vim_plug_just_installed
  :execute 'source '.fnameescape(vim_plug_path)
endif

" ============================================================================
" Active plugins
call plug#begin('~/.vim/plugged')

" Better file browser
"Plug 'scrooloose/nerdtree'
" Python mode (indentation, doc, refactor, lints, code checking, motion and
" operators, highlighting, run and ipdb breakpoints)
" Plug 'klen/python-mode'
"
" Plug 'altercation/vim-colors-solarized'
Plug 'lifepillar/vim-solarized8'

" Language Specific
Plug 'neovimhaskell/haskell-vim'
Plug 'rust-lang/rust.vim'

Plug 'edkolev/tmuxline.vim'
Plug 'tpope/vim-fugitive'

" Sublime Text like multiple selection.
Plug 'terryma/vim-multiple-cursors'

" Asynchronous linter engine
Plug 'w0rp/ale'

" Asynchronous completion for vim8
Plug 'maralla/completor.vim'
" Plug 'google/yapf'
"
" Interactive python
Plug 'metakirby5/codi.vim'
"

" Statusline
Plug 'vim-airline/vim-airline'

" Fuzzy file finding
Plug 'junegunn/fzf'

" Latex
Plug 'xuhdev/vim-latex-live-preview', {'for': 'tex'}

" Markdown
Plug 'JamshedVesuna/vim-markdown-preview'

" Snakemake
Plug 'ivan-krukov/vim-snakemake'


" Tell vim-plug we finished declaring plugins, so it can load them
call plug#end()

if vim_plug_just_installed
    echo "Installing Bundles, please ignore key map error messages"
    :PlugInstall
endif
" ============================================================================

syntax enable
set background=dark
" let g:solarized_termcolors=256
" set Vim-specific sequences for RGB colors
set termguicolors
let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"

colorscheme solarized8
autocmd FileType python map <buffer> <C-G> :!python % <CR>

filetype plugin on
filetype indent on
"silent! set colorcolumn=80
let mapleader=","
set expandtab
set smarttab
set shiftwidth=2
set tabstop=2
set softtabstop=2

set wildmenu        " Improved command completions
set showcmd         " Show vim command completions
set laststatus=2    " Display status in single window
"set cmdheight=2     " Set command window height to 2
set lazyredraw
set showmatch
set matchtime=3
set incsearch
set hlsearch
"set belloff=all
set visualbell
nnoremap <leader><space> :nohlsearch<CR>

vnoremap <silent> <leader>r :call VisualSelection('replace', '')<CR>

set ruler
set cursorline

"paste from clipboard stuff
set pastetoggle=<F10>
inoremap <C-v> <F10><C-r>+<F10>

"tabsetup
map <leader>tt :tabnew<cr>
map <leader>tc :tabclose<cr>
map <leader>tm :tabmove
map <leader>tn :tabnext<cr>
map <leader>tp :tabprevious<cr>

" Window movement
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

set scrolloff=10 "keeps 5 lines above and below cursor
set ai          "set auto indent
set si          "set smart indent
set nu          "set line numbers

" comments
map ,# :s/^/#/<CR>
map ,> :s/^/> /<CR>
map ," :s/^/\"/<CR>
map ,% :s/^/%/<CR>
map ,! :s/^/!/<CR>
map ,; :s/^/;/<CR>
map ,- :s/^/--/<CR>
" wrapping comments
map ,( :s/^\(.*\)$/\(\* \1 \*\)/<CR>
map ,< :s/^\(.*\)$/<!-- \1 -->/<CR>
map ,d :s/^\([/(]\*\\|<!--\) \(.*\) \(\*[/)]\\|-->\)$/\2/<CR>

function! Komment()
  if getline(".") =~ '\/\*'
    let hls=@/
    s/^\/\*//
    s/*\/$//
    let @/=hls
  else
    let hls=@/
    s/^/\/*/
    s/$/*\//
    let @/=hls
  endif
endfunction
map <leader>k :call Komment()<CR>

imap jj <esc>

"set makeprg=./compile

syntax on

"Compile HAX
nnoremap <Tab> :w<bar>:make<bar><CR>
nnoremap ` :w<bar>:!python3 %<CR>

" quick vimrc navigation
nnoremap <leader>ev :vsp $MYVIMRC<CR>
nnoremap <leader>sv :source $MYVIMRC<CR>

" ale configuration
" let g:lint_on_text_changed='never'
let g:lint_on_insert_leave=1
let g:ale_set_highlights=0
let g:airline#extensions#ale#enabled=1
nmap <silent> <C-k> <Plug>(ale_previous_wrap)
nmap <silent> <C-j> <Plug>(ale_next_wrap)

let g:ale_fixers = {
\  '*': ['remove_trailing_lines', 'trim_whitespace'],
\  'python': ['black'],
\}
let g:ale_linters = {
\  'python' : ['pylint'],
\}

augroup configgroup
    autocmd!
    autocmd VimEnter * highlight clear SignColumn
"    autocmd BufWritePre *.php,*.py,*.js,*.txt,*.hs,*.java,*.md
"                \:call <SID>StripTrailingWhitespaces()
    autocmd FileType java setlocal tabstop=8
    autocmd FileType java setlocal shiftwidth=2
"    autocmd FileType java setlocal list
"    autocmd FileType java setlocal listchars=tab:+\ ,eol:-
"    autocmd FileType java setlocal formatprg=par\ -w80\ -T4
    autocmd FileType php setlocal expandtab
    autocmd FileType php setlocal list
    autocmd FileType php setlocal listchars=tab:+\ ,eol:-
    autocmd FileType php setlocal formatprg=par\ -w80\ -T4
    autocmd FileType ruby setlocal tabstop=2
    autocmd FileType ruby setlocal shiftwidth=2
    autocmd FileType ruby setlocal softtabstop=2
    autocmd FileType ruby setlocal commentstring=#\ %s
    autocmd FileType python setlocal commentstring=#\ %s
    autocmd FileType cpp setlocal tabstop=2
    autocmd FileType cpp setlocal shiftwidth=2
    autocmd FileType cpp setlocal softtabstop=2
    " sets auto line wrapping for text files
    autocmd FileType txt setlocal textwidth=78
    autocmd FileType tex setlocal textwidth=78
    autocmd FileType md  setlocal textwidth=78
    autocmd FileType tex setlocal nocursorline
    autocmd FileType tex setlocal spell
"    autocmd FileType python setlocal shiftwidth=2
"    autocmd FileType python setlocal tabstop=2
"    autocmd FileType python setlocal softtabstop=2
"
    autocmd FileType python let &makeprg='python %'
"   autocmd FileType python let &makeprg='pylint %\|sed "s/^\(\w*\):\s*\([0-9]\+\)/%:\2:\ \1:\ /g"'
    autocmd BufEnter *.cls setlocal filetype=java
    autocmd BufEnter *.zsh-theme setlocal filetype=zsh
    autocmd BufEnter Makefile setlocal noexpandtab
    autocmd BufEnter *.sh setlocal tabstop=2
    autocmd BufEnter *.sh setlocal shiftwidth=2
    autocmd BufEnter *.sh setlocal softtabstop=2

    autocmd FileType snakemake let &makeprg='snakemake --dryrun --snakefile %'
augroup END


" OS Specific Install
if !exists("g:os")
  if has("win64") || has("win32") || has("win16")
    let g:os = "Windows"
  else
    let g:os = substitute(system('uname'), '\n', '', '')
  endif
endif

if g:os == "Darwin"
  set backspace=2
  let g:livepreview_previewer = 'open -a Preview'

endif

" maralla/completor
let g:completor_python_binary = '/usr/bin/python3'
" Use tab completion
inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <cr>    pumvisible() ? "\<C-y>\<cr>" : "\<cr>"
let g:completor_racer_binary = '~/.cargo/bin/racer'

" markdown preview
let vim_markdown_preview_toggle=1
let vim_markdown_preview_github=1

" ==================================
" BEGIN
" From https://github.com/amix/vimrc
" ==================================

function! CmdLine(str)
    exe "menu Foo.Bar :" . a:str
    emenu Foo.Bar
    unmenu Foo
endfunction

function! VisualSelection(direction, extra_filter) range
    let l:saved_reg = @"
    execute "normal! vgvy"

    let l:pattern = escape(@", "\\/.*'$^~[]")
    let l:pattern = substitute(l:pattern, "\n$", "", "")

    if a:direction == 'gv'
        call CmdLine("Ack '" . l:pattern . "' " )
    elseif a:direction == 'replace'
        call CmdLine("%s" . '/'. l:pattern . '/')
    endif

    let @/ = l:pattern
    let @" = l:saved_reg
endfunction

" ==================================
" END
" From https://github.com/amix/vimrc
" ==================================
