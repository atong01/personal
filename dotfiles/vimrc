

" Vim-plug initialization

let vim_plug_just_installed = 0
let vim_plug_path = expand('~/.vim/autoload/plug.vim')
if !filereadable(vim_plug_path)
    echo "Installing Vim-plug..."
    echo ""
    silent !mkdir -p ~/.vim/autoload
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    let vim_plug_just_installed = 1
endif

" manually load vim-plug the first time
if vim_plug_just_installed
  :execute 'source '.fnameescape(vim_plug_path)
endif

" ============================================================================
" Active plugins
call plug#begin('~/.vim/plugged')

" Better file browser
"Plug 'scrooloose/nerdtree'
" Python mode (indentation, doc, refactor, lints, code checking, motion and
" operators, highlighting, run and ipdb breakpoints)
" Plug 'klen/python-mode'
" Better autocompletion
"Plug 'Shougo/neocomplete.vim'
" Python and other languages code checker
Plug 'scrooloose/syntastic'

" Plug 'neovimhaskell/haskell-vim'
Plug 'edkolev/tmuxline.vim'

" Plug 'w0rp/ale'
" Plug 'google/yapf'

" Tell vim-plug we finished declaring plugins, so it can load them
call plug#end()

if vim_plug_just_installed
    echo "Installing Bundles, please ignore key map error messages"
    :PlugInstall
endif
" ============================================================================
"
autocmd FileType python nnoremap <leader>= :0,$!yapf<CR>


syntax enable
set background=dark
"autocmd FileType python map <buffer> <C-G> :!python % <CR>

filetype plugin on
filetype indent on
"silent! set colorcolumn=80
let mapleader=","
set expandtab
set smarttab
set shiftwidth=2
set tabstop=2
set softtabstop=2

set wildmenu
set lazyredraw
set showmatch
set incsearch
set hlsearch
"set belloff=all
set visualbell
nnoremap <leader><space> :nohlsearch<CR>

set ruler
set cursorline

"paste from clipboard stuff
set pastetoggle=<F10>
inoremap <C-v> <F10><C-r>+<F10>

"tabsetup
map <leader>tt :tabnew<cr>
map <leader>tc :tabclose<cr>
map <leader>tm :tabmove
map <leader>tn :tabnext<cr>
map <leader>tp :tabprevious<cr>


set scrolloff=10 "keeps 5 lines above and below cursor
set ai          "set auto indent
set si          "set smart indent
set nu          "set line numbers

" comments
map ,# :s/^/#/<CR>
map ,> :s/^/> /<CR>
map ," :s/^/\"/<CR>
map ,% :s/^/%/<CR>
map ,! :s/^/!/<CR>
map ,; :s/^/;/<CR>
map ,- :s/^/--/<CR>
" wrapping comments
map ,( :s/^\(.*\)$/\(\* \1 \*\)/<CR>
map ,< :s/^\(.*\)$/<!-- \1 -->/<CR>
map ,d :s/^\([/(]\*\\|<!--\) \(.*\) \(\*[/)]\\|-->\)$/\2/<CR>

function! Komment()
  if getline(".") =~ '\/\*'
    let hls=@/
    s/^\/\*//
    s/*\/$//
    let @/=hls
  else
    let hls=@/
    s/^/\/*/
    s/$/*\//
    let @/=hls
  endif
endfunction
map <leader>k :call Komment()<CR>

imap jj <esc>
imap jk <esc>
imap kk <esc>

"set makeprg=./compile

syntax on

" Processing
"au BufRead,BufNewFile *.pde setf processing
" 
" hardcore hax
":command! P :! processing-java --sketch=$PWD/ --output=temp --run --force
":command! PP :! processing-java --sketch=$PWD/ --output=temp --force --run
"autocmd BufNewFile,BufRead *.pde set makeprg=mkdir\ -p\ ./output\ &&\ processing-java\ --sketch=\"`pwd`\"\ --output=\"`pwd`\"/output\ --run\ --force
"

"Compile HAX
nnoremap <Tab> :w<bar>:make<bar><CR>
nnoremap ` :w<bar>:!wvrun python %<CR>

nnoremap <leader>ev :vsp $MYVIMRC<CR>
nnoremap <leader>sv :source $MYVIMRC<CR>

"call "pathogen#infect()
"call pathogen#runtime_append_all_bundles()

augroup configgroup
    autocmd!
    autocmd VimEnter * highlight clear SignColumn
"    autocmd BufWritePre *.php,*.py,*.js,*.txt,*.hs,*.java,*.md
"                \:call <SID>StripTrailingWhitespaces()
    autocmd FileType java setlocal tabstop=8
    autocmd FileType java setlocal shiftwidth=2
"    autocmd FileType java setlocal list
"    autocmd FileType java setlocal listchars=tab:+\ ,eol:-
"    autocmd FileType java setlocal formatprg=par\ -w80\ -T4
    autocmd FileType php setlocal expandtab
    autocmd FileType php setlocal list
    autocmd FileType php setlocal listchars=tab:+\ ,eol:-
    autocmd FileType php setlocal formatprg=par\ -w80\ -T4
    autocmd FileType ruby setlocal tabstop=2
    autocmd FileType ruby setlocal shiftwidth=2
    autocmd FileType ruby setlocal softtabstop=2
    autocmd FileType ruby setlocal commentstring=#\ %s
    autocmd FileType python setlocal commentstring=#\ %s
    autocmd FileType cpp setlocal tabstop=2
    autocmd FileType cpp setlocal shiftwidth=2
    autocmd FileType cpp setlocal softtabstop=2
"    autocmd FileType python setlocal shiftwidth=2
"    autocmd FileType python setlocal tabstop=2
"    autocmd FileType python setlocal softtabstop=2
    autocmd BufEnter *.cls setlocal filetype=java
    autocmd BufEnter *.zsh-theme setlocal filetype=zsh
    autocmd BufEnter Makefile setlocal noexpandtab
    autocmd BufEnter *.sh setlocal tabstop=2
    autocmd BufEnter *.sh setlocal shiftwidth=2
    autocmd BufEnter *.sh setlocal softtabstop=2
augroup END

"Nerdtree
"autocmd StdinReadPre * let s:std_in=1
"autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
"nmap <C-n> :NERDTreeToggle<CR>

"ycm: youcompleteme
"let g:ycm_python_binary_path = 'python'
"
"

" OS Specific Install

if has("unix")
  let s:uname = substitute(system("uname -s"), '\n', '', '')
  if s:uname == "Darwin"
    set backspace=2 
  endif
endif


" Syntastic
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_python_checkers = ['pylint']
